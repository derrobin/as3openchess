<?xml version="1.0" encoding="utf-8"?>
<!--
ChessboardField
@author robin heinel
-->
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml">

	<mx:Script>
		<![CDATA[
		import de.robinz.as3.pcc.chessboard.library.ChessboardMove;
		import de.robinz.as3.pcc.chessboard.library.ChessboardUtil;
		import de.robinz.as3.pcc.chessboard.library.CssSelectors;
		import de.robinz.as3.pcc.chessboard.library.pieces.IPiece;

		import mx.controls.Text;

		private var _validMove : ChessboardMove;

		public function set validMove( move : ChessboardMove ) : void {
			this._validMove = move;
		}

		public function get validMove() : ChessboardMove {
			return this._validMove;
		}

		public function getNotation() : String {
			return this.id;
		}

		public function hasPiece() : Boolean {
			if ( this.numChildren > 0 ) {
				return true;
			}

			return false;
		}

		public function getPiece() : IPiece {
			try {
				var t : Text = this.getText();
				var piece : IPiece = t.data as IPiece;
				return piece;
			} catch( e : Error ) {
				trace( e.getStackTrace() );
				return null;
			}

			return null;
		}

		public function setPieceFilter( color : int ) : void {
			var p : IPiece = getPiece();
			var t : Text = getText();

			if ( p == null || t == null ) {
				return;
			}

			t.filters = ChessboardUtil.getPieceFilters( color );
		}

		public function setPiece( piece : IPiece ) : void {
			var text : Text = new Text();

			text.mouseChildren = false;
			text.text = piece.fontKey;
			text.data = piece;
			text.styleName = CssSelectors.PIECE_HOLDER;

			this.removeAllChildren();
			this.addChild( text );
		}

		public function refreshFontKey() : void {
			if ( ! this.hasPiece() ) {
				return;
			}

			this.getText().text = this.getPiece().fontKey;
		}

		public function getText() : Text {
			if ( this.numChildren == 0 ) {
				return null;
			}

			var t : Text = this.getChildAt( 0 ) as Text;
			return t;
		}
		]]>
	</mx:Script>

</mx:Box>
